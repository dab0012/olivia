classDiagram
  class BioconductorScraper {
    BIOCONDUCTOR_LIST_URL : str
    BIOCONDUCTOR_PACKAGE_DATA_URL : str
    DESCRIPTION : str
    NAME : str
    obtain_package_names() list[str]
  }
  class CSVDataSource {
    data : DataFrame, TextFileReader, NoneType
    dependency_field : str
    dependency_version_field : str
    dependent_field : str
    dependent_url_field : str
    dependent_version_field : str
    file_path : str
    obtain_package_data(package_name: str, override_previous: bool) dict
    obtain_package_names() list[str]
    obtain_packages_data(package_names: list[str], progress_bar: tqdm.tqdm) tuple[list[dict], list[str]]
  }
  class CranScraper {
    CRAN_PACKAGE_DATA_URL : str
    CRAN_PACKAGE_LIST_URL : str
    DESCRIPTION : str
    NAME : str
    obtain_package_names() list[str]
  }
  class DataSource {
    description : str
    name : str
    get_info() dict
    obtain_package_data(package_name: str)* dict
    obtain_package_names()* list[str]
    obtain_packages_data(package_names: list[str])* list[dict]
  }
  class LibrariesIoException {
  }
  class LibrariesioDataSource {
    platform : str
    search : Search
    obtain_package_data(package_name: str) Union[dict, None]
    obtain_package_names()* list[str]
    obtain_packages_data(package_names: list[str]) list[dict]
  }
  class NotFoundInDataSourceException {
    data_source_name : str
    package_name : str
  }
  class NpmScraper {
    DESCRIPTION : str
    NAME : str
    NPM_PACKAGE_LIST_URL : str
    NPM_PACKAGE_REGISTRY_URL : str
    NPM_REPO_URL : str
    chunks_folder : NoneType
    obtain_package_names(page_size: int, show_progress_bar: bool, save_chunks: bool) list[dict]
  }
  class PypiScraper {
    DESCRIPTION : str
    NAME : str
    PYPI_PACKAGE_DATA_URL : str
    PYPI_PACKAGE_LIST_URL : str
    obtain_package_names() list[str]
  }
  class ScraperDataSource {
    not_found : list
    request_handler : NoneType, RequestHandler
    obtain_package_data(package_name: str) Union[dict, None]
    obtain_package_names()* list[str]
    obtain_packages_data(package_names: list[str], progress_bar: tqdm.tqdm) Tuple[list[dict], list[str]]
  }
  class ScraperError {
  }
  CSVDataSource --|> DataSource
  LibrariesioDataSource --|> DataSource
  BioconductorScraper --|> ScraperDataSource
  CranScraper --|> ScraperDataSource
  NpmScraper --|> ScraperDataSource
  PypiScraper --|> ScraperDataSource
  ScraperDataSource --|> DataSource
